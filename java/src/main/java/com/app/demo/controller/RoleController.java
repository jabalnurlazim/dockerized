package com.app.demo.controller;

import com.app.demo.model.Role;
import com.app.demo.params.RoleParams;
import com.app.demo.repository.RoleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;

@Controller // This means that this class is a Controller
@RequestMapping(path="/roles") // This means URL's start with /roleAPI (after Application path)
public class RoleController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RoleRepository roleRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewRole (@RequestBody RoleParams role) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a JSON parameter from the GET or POST request

        if(role.getRole() == null || role.getRole().isEmpty())
            return "Role name cannot be null";

        Role n = new Role();
        n.setRole(role.getRole());
        n.setEnabled(role.isEnabled());

        roleRepository.save(n);

        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Role> getAllRoles() {
        // This returns a JSON or XML with the users
        return roleRepository.findAll();
    }

    @DeleteMapping(path="/delete/{id}")
    public @ResponseBody String deleteRole (@PathVariable int id) {
        roleRepository.deleteById(id);
        return "Deleted";
    }

    @PutMapping(path="/update/{id}")
    public @ResponseBody String updateRole (@RequestBody RoleParams role, @PathVariable int id) {

        Role n = roleRepository.findById(id).get();

        if(role == null) return "Nothing to update";

        if(role.getRole() != null && !role.getRole().isEmpty()) n.setRole(role.getRole());

        if(role.isEnabled()) n.setEnabled(true);

        roleRepository.save(n);

        return "Updated";
    }
}